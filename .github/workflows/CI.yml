name: CI

on:
  workflow_dispatch:
  push:
    branches:
      - "master"
      - "feature/*"
  pull_request:
    branches:
      - "master"

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  # Don't emit giant backtraces in the CI logs.
  RUST_BACKTRACE: short

jobs:
  lint:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04]
        rust: [stable]

    steps:
      - name: Checkout repro
        uses: actions/checkout@v3

      # nice reusable workflow to get rust ready
      - name: Setup rust toolchain
        uses: hecrj/setup-rust-action@master
        with:
          rust-version: ${{ matrix.rust }}
          components: "clippy, rustfmt"

      # make sure all code has been formatted with rustfmt
      - name: Check formatting (rustfmt)
        run: cargo fmt --check -- --color always

      # run a collection of lints
      - name: Check against available lints (clippy)
        run: cargo clippy --all-targets -- -D warnings

  build:
    name: Build
    needs: lint
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        rust: [stable]
        include:
          - os: macOS-latest
            rust: "stable"
            targets: "x86_64-apple-darwin"
          - os: ubuntu-latest
            rust: "stable"
            targets: "x86_64-unknown-linux-musl"
          - os: windows-latest
            rust: "stable"
            targets: "x86_64-pc-windows-msvc"
    steps:
      - name: Build '${{ matrix.os }}'
        if: ${{ (matrix.os == 'ubuntu-22.04') && (matrix.container != 'redoxos/redoxer') }}
        run: |
          echo "OS: ${{ matrix.os }}"
          echo "Container: ${{ matrix.container }}"
          cargo build --color auto
      - name: Build '${{ matrix.os}}'
        if: ${{ (matrix.os != 'ubuntu-22.04') }}
        run: |
          echo "OS: ${{ matrix.os }}"
          cargo build --color auto

  unit_tests:
    name: Unit tests
    needs: [lint,build]
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        rust: [stable]
        # rust: [stable, beta, nightly]
        include:
          - os: macOS-latest
            rust: "stable"
            #components: 'rustfmt, clippy'
            targets: "x86_64-apple-darwin"
          - os: ubuntu-latest
            rust: "stable"
            targets: "x86_64-unknown-linux-musl"
          - os: windows-latest
            rust: "stable"
            targets: "x86_64-pc-windows-msvc"
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.rust == 'nightly' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Set up Rust
        uses: hecrj/setup-rust-action@v1
        with:
          rust-version: ${{ matrix.rust }}
      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Run unit tests
        shell: bash
        run: cargo test
